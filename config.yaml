# Configuration file for FlightGazer

CONFIG_VERSION: v.8.4.0 # do not modify this

# ================ General settings ================
# ==================================================

UNITS: 0
# Select which units to use.
# 0 = aeronautical (nmi, ft, kt)
# 1 = metric (km, m, km/h)
# 2 = imperial (mi, ft, mph)

HEIGHT_LIMIT: 15000
# [Integer: 2500 ~ 75000 feet or 760 ~ 22860 meters] (only supply a number)
# Aircraft at an altitude lower than this will be considered for detailed tracking.

RANGE: 2
# [Float: 0.5 ~ 20 nautical miles or 0.9 ~ 37 kilometers or 0.6 ~ 23 miles] (only supply a number)
# Aircraft within this radius from your location will be considered for detailed tracking.

# ================ API settings ====================
# ==================================================

API_KEY: ''
# [String]
# Put your FlightAware API key here. Leave as '' to not use the API.
# Having an API key will enable the journey readout (the origin and departure) data for an aircraft.
# Don't have an API key?
# https://www.flightaware.com/commercial/aeroapi/#compare-plans-section

API_DAILY_LIMIT:
# [Integer: > 0, null, or empty]
# Set this to an integer value if you want to limit number of calls in a day.
# If you want to have unlimited API calls, set this to null or an empty value.

API_COST_LIMIT: 5.00
# [Float: dollar amount (no currency sign), null, or empty]
# Limit API usage of an API key based on its running cost over the past 30 days. (ex: $10.00)
# If the cost exceeds this value, API calls will stop and will not resume until there are credits available again.
# If the cost upon startup exceeds this value, the API will not be used but will start if there are credits available at a later time.
# If you want to have unlimited API calls, set this to null or an empty value.

API_SCHEDULE:
  ENABLED: false
  SUNDAY:
    0-11:  '------xxxxxx'
    12-23: 'xxxxxxxxxxx-'
  MONDAY:
    0-11:  '-------xxx--'
    12-23: '-----xxxxxx-'
  TUESDAY:
    0-11:  '-------xxx--'
    12-23: '-----xxxxxx-'
  WEDNESDAY:
    0-11:  '-------xxx--'
    12-23: '-----xxxxxx-'
  THURSDAY:
    0-11:  '-------xxx--'
    12-23: '-----xxxxxx-'
  FRIDAY:
    0-11:  '-------xxx--'
    12-23: '-----xxxxxx-'
  SATURDAY:
    0-11:  '------xxxxxx'
    12-23: 'xxxxxxxxxxx-'
# Set a time during the day when to use the API.
# An 'x' marks the hour when the API can be used. A '-' indicates an hour to not use the API.
# For the ENABLED key, if this value is set to false, the API can be used at all times.
# If any time slot is left blank, does not use exactly 12 characters, or uses characters other than
# 'x' or '-', the API will not be used for that entire time slot.
# Hint: use the Insert key for ease of input for this setting.
# Other notes / examples:
# 0-11:  '------xxxxxx' means "use the API from 06:00 thru 12:00"
# 12-23: 'xxxxxxxxxxx-' means "use the API from 12:00 up to 23:00"
# 0-11:  '-x--xx-xxx-x' means "use the API from 1:00-2:00, 4:00-6:00, 7:00-9:00, 11:00-12:00"
# If the string starts with a '-', you must encapsulate it in quotes.

# ============= Screen Output settings =============
# ==================================================

JOURNEY_PLUS: false
# [true/false]
# A hybrid between ENHANCED_READOUT and the default aircraft info.
# Adds aircraft track, vertical speed, and RSSI to this layout.
# Enable this if you prefer maximizing information density.

ENHANCED_READOUT: false
# [true/false]
# If true, show more details on aircraft info screen and replaces origin and destination readout.
# Will not use API or show an aircraft's journey (origin/destination) even if a key is provided.
# Useful if API is not in use.
# Additional details include aircraft coordinates, ground track, vertical speed, and RSSI.

ENHANCED_READOUT_AS_FALLBACK: true
# [true/false]
# When true, switch to using ENHANCED_READOUT if the API Key fails at startup or when any API limits are reached.
# When the API can be used again, the display will switch back to the other layouts.
# This setting only works if ENHANCED_READOUT is false. Recommended to be left as true.

SHOW_EVEN_MORE_INFO: true
# [true/false]
# Display additional information like aircraft type and airline/owner as a scrolling marquee.
# This option only works with the JOURNEY_PLUS or EHNANCED_READOUT display types.
# If using JOURNEY_PLUS, this information will replace the default center readout
# and relocate RSSI in the bottom right with the aircraft track (vertical speed is no longer shown).

CLOCK_CENTER_ROW:
  ROW1: 1
  ROW2: 0
# Choose what to display on the Clock screen center row.
# Leave only ROW1 filled with a non-zero number to show just one row of data.
# When ROW1 and ROW2 are filled, the Clock display will use a smaller font to maximize space.
# Having ROW1 equal to zero or blank, but ROW2 filled will force using the smaller font on the Clock display.
# Options:
# 0, null, or blank = Don't use this option
# 1 = Sunset/Sunrise
# 2 = ADS-B receiver stats (gain, noise, % loud signals)
# 3 = Extended calendar info (month, week number, day of the year)

CLOCK_24HR: false
# [true/false]
# If true, use 24 hour clock. If false, 12 hour clock will be used.

ALTERNATIVE_FONT: false
# [true/false]
# When true, use a less squared-off font for the majority of the display's output.
# This alternative font also maximizes the difference between homoglyphs (ex: '5' vs 'S', '0' vs 'O', etc.)

DISPLAY_SWITCH_PROGRESS_BAR: true
# [true/false]
# When true, display a progress bar at the bottom of the aircraft info screen to indicate how long
# the current aircraft will remain on display. This progress bar will only appear if two (2) or more
# aircraft are in the area.

# ============== Brightness settings ===============
# ==================================================

BRIGHTNESS: 75
# [Integer: 0 ~ 100]
# Set the default LED brightness.

ACTIVE_PLANE_DISPLAY_BRIGHTNESS: 100
# [Integer: 0 ~ 100, null, or empty]
# When there is an active aircraft, use a different brightness level. Useful for grabbing attention.
# Overrides all other brightness settings when an aircraft is being tracked. This value does not depend if
# ENABLE_TWO_BRIGHTNESS is enabled.
# If you do not want the brightness to change, set this to null or an empty value.

ENABLE_TWO_BRIGHTNESS: true
# [true/false]
# If true, enables dynamically switching brightness based on time of day. If false, only BRIGHTNESS will be used.

BRIGHTNESS_2: 40
# [Integer: 0 ~ 100]
# Secondary LED brightness.
# BRIGHTNESS_2 will be used from sunset to sunrise ("night") and BRIGHTNESS will be used for all other times.

USE_SUNRISE_SUNSET: true
# [true/false]
# If true, use sunrise and sunset times to adjust brightness.
# If sunrise or sunset times are not available, will fall back to BRIGHTNESS_SWITCH_TIME values.

BRIGHTNESS_SWITCH_TIME:
  Sunrise: 06:00
  Sunset: 18:00
# [Time]
# Set the time of day (in 24-hr format) to switch brightness levels.

# ============== Advanced settings =================
# ==================================================

FLYBY_STALENESS: 60
# [Integer: 2 ~ 1440] (minutes)
# If the same aircraft appears again before this time, do not consider it as a flyby
# and reuse the same API results (when enabled).

LOCATION_TIMEOUT: 60
# [Integer: 15 ~ 60] (seconds)
# How much time must pass before an aircraft's last location is considered stale and removed from tracking.
# If less than 60, affects total aircraft count.
# This setting, if low enough, will cause aircraft that are present in the area to "drop out" more readily
# if they don't report a timely location update.

PREFER_LOCAL: true
# [true/false]
# When set to true, FlightGazer will attempt to directly read dump1090 data from the local file system first rather than relying
# on accessing it through a URL. When false, FlightGazer will never try to read from the file system.
# This feature only works on Linux systems.
# If you're trying to access dump1090 from a remote system, set this setting to false.
# If you initially set up your ADS-B system with AirNav's rbfeeder or Flightradar24's Pi24 image, set this to true and run
# FlightGazer on that system.

CUSTOM_DUMP1090_LOCATION: ''
# [String]
# URL of your dump1090 install if it's in a different location or on a different network device.
# ex: http://localhost/custom_name_here or http://192.168.xxx.xxx:8080 (no trailing /)

CUSTOM_DUMP978_LOCATION: ''
# [String]
# URL of your dump978 install if it's in a different location or on a different network device.
# If you're not using dump978, leave the value as ''.
# ex: http://192.168.xxx.xxx:8978

FOLLOW_THIS_AIRCRAFT: ''
# [String]
# If there is a specific aircraft you would like to follow, put its ICAO ID here. Leave this as '' to not use this feature.
# This is not the Callsign nor Registration for the aircraft. It is a string of 6 hexidecimal values unique to the aircraft.
# Only one (1) aircraft is allowed for this setting.
# If this aircraft enters the reception area for your ADS-B receiver (not the values set by HEIGHT_LIMIT or RANGE)
# then FlightGazer will start tracking it as if it were inside your designated RANGE.
# When tracking this aircraft, FlightGazer will use its ENHANCED_READOUT mode regardless of the setting for that option.
# This does not disable API use. If this aircraft does enter your defined area, FlightGazer will follow the same settings
# that would apply to other aircraft inside of that area. Additionally, when there are multiple aircraft in the area and
# FlightGazer switches to this specific aircraft which is outside of the area, FlightGazer will still use ENHANCED_READOUT for that aircraft.

FASTER_REFRESH: false
# [true/false]
# When true, decrease dump1090 polling time to 1 second versus the default 2 seconds. Increases CPU load.

FLYBY_STATS_ENABLED: true
# [true/false]
# Save general stats of aircraft flybys and API usage to a CSV file in the directory this is stored in.
# It is recommended to leave this left as true in many cases.
# Note that if FlightGazer is restarted at some point in the day and this setting is false,
# FlightGazer will not be able to recall the amount of aircraft tracked so far for that day before it was restarted.

WRITE_STATE: true
# [true/false]
# (Linux only) When FlightGazer is running, write a json file of its current operating state (variable values) in /run/FlightGazer/.
# This is useful if you wish to use the data that FlightGazer generates for itself in other applications.
# Writing to /run should be safe as dump1090 (and its derivatives) also do the same, and for most Linux systems
# /run lives entirely in RAM, leading to zero disk writes. It is recommended to leave this enabled.

# ============== RGB-Matrix settings ===============
# ==================================================

GPIO_SLOWDOWN: 2
# [Integer: 0 ~ 4]
# Set this to the specific value that works for your setup.
# Higher values are more suited for faster/more modern Raspberry Pi's.

HAT_PWM_ENABLED: true
# [true/false]
# If you set the quality modification for the RGB-Matrix hat, set to true. If not, set to false.

LED_PWM_BITS: 8
# [Integer: 1 ~ 11]
# Lower decreases color depth but increases refresh rate. Adjust to taste. '8' works well in most cases.

# ========== Advanced RGB-Matrix settings ==========
# ==================================================
# Only enable the below settings if you know what you're doing!
# Remove the leading '#' to enable the setting.
# There will be no support if something breaks when using these settings.
# Refer to https://github.com/hzeller/rpi-rgb-led-matrix for valid values.

# ADV_LED_PWM_LSB: 130
# ADV_LED_HARDWARE_MAPPING: 'regular'
# ADV_LED_ROW_ADDRESS_TYPE: 0
# ADV_LED_MULTIPLEXING: 0
# ADV_LED_SCAN_MODE: 0
# ADV_LED_DISABLE_HARDWARE_PULSING: false
# ADV_LED_INVERSE_COLORS: false
# ADV_LED_RGB_SEQUENCE: 'RGB'
# ADV_LED_PANEL_TYPE: ''
# ADV_LED_LIMIT_REFRESH_RATE: 0
# ADV_LED_PIXEL_MAPPER_CONFIG: ''
# ADV_LED_LIMIT_REFRESH_RATE: 0
# ADV_LED_DISABLE_BUSY_WAITING: false
# ADV_LED_PWM_DITHER_BITS: 0