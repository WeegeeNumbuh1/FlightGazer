FlightGazer Changelog
v.V.R.U - Release date
  | | |
  | | `- Update
  | `--- Release
  `----- Version

v.3.5.0 - 2025-04-11
    - [sic] Gameing! There's an FPS counter for the display renderer because we love feature creep here (and I like the stats)
        - The FPS display now takes the place of the display formatting stat in Interactive mode
    - Handle rare edge case when the Interactive print display routine encounters a KeyError
        - This bug has been associated when a system is heavily IO bound/thrashing (eg: Raspberry Pi Zero) and the processing
          threads no longer are in lockstep with one another, leading to a mismatch in the data that the print display routine reads from
        - Additionally, another sign the system is thrashing is the appearance of numerous messages from the "Clock-Tower" thread in the logs
        - Very minor change to aircraft selection algorithm that may make it further resillent to thrashing scenarios
    - Improved formatting for footer in Interactive mode
        - Footer section adjusts what stats to show based on startup (eg: NO_DISPLAY_MODE, etc)
    - More accurate stat for dump1090 response times
        - The time taken to process the dump1090 json is now measured and the response stat is calculated to account for this
        - When also connected to dump978, the footer text will show "dump1090+dump978" to reflect the combined response time for both
          (it has always been this way)
    - Improved center alignment with the center readout in JOURNEY_PLUS mode
    - When Verbose mode is enabled, actually show verbose data in Interactive mode
    - Adjusted logging messages
    - Initialization script now shows how many lines the log file had before truncation

v.3.4.4 - 2025-03-31
    - Increase dump1090 timeout tolerance
    - Another fix for the fix in v.3.4.3
    - Very minor tweak to Interactive readout
    - The 'V' glyph from the alternative font matches the default font for better readability
        - 'V' could be misinterpreted as 'Y'

v.3.4.3 - 2025-03-31
    - Fix minor UI issue where the 3x3 font would be used when both JOURNEY_PLUS and ENHANCED_READOUT is enabled

v.3.4.2 - 2025-03-30
    - Callsign now only uses the alternative font to reduce ambiguity with letters and numbers
        - All other readouts will still obey the ALTERNATIVE_FONT setting
    - Take advantage of additional readsb features if present when parsing ADS-B info

v.3.4.1 - 2025-03-28
    - Fix long-standing workaround (implemented v.1.5.1) for RGBMatrixEmulator writing its config file outside of FlightGazer
        - The RGBMatrixEmulator config file is now contained within the FlightGazer directory as
          FlightGazer overrides where RGBMatrixEmulator looks for its own configuration file
        - Updated initialization script to handle RGBMatrixEmulator 0.13.1 changes
    - Init script now waits 3 months between checks to start updating python dependencies
    - Improved display exception handling
    - Updater script will now try to gracefully shutdown non-systemd instances of FlightGazer running in tmux

v.3.4.0 - 2025-03-27
    - NEW: The best of both worlds: Enhanced Readout + the original journey indicators
        - Aircraft track, vertical speed, and RSSI are now shown at the same time along with origin, destination, and flight time readout
        - Can be enabled with the JOURNEY_PLUS setting
    - Adjusted 4x4 font for better readability and with more drawing symbols
    - Refactored and optimized formatting routines for faster performance

v.3.3.1 - 2025-03-26
    - FlightGazer will now detect if the time changes (eg from a system reboot, DST, etc)
        - Does nothing other than write to the log
    - Removed depreciated code that could break FlightGazer under specific environments

v.3.3.0 - 2025-03-24
    - Massively improved display responsiveness to data changes when showing active aircraft info
        - Was caused by the DisplayFeeder routine reading data before the internal aircraft selector algorithm
          could finish, thus the data readout lagged behind by 1 refresh cycle.
          This affected the switchover and when the display would show updated info when switching aircraft.
          - This was present since v.1.0.0
        - Refactored all internal display routines to maximize responsiveness and to take advantage of unused but existing methods
        - This should be as responsive as it gets without having to increase the internal tick rate
            - For the nerds reading this, this value has been 10Hz since inception
    - Introduce log housekeeping: init script will check and keep the latest 1000 lines of the log
    - Minor log output tweaks (as usual)
    - Modify configuration file for RGBMatrixEmulator to take advantage of newer pixel look
        - Only affects new installs
        - https://github.com/ty-porter/RGBMatrixEmulator/releases/tag/v0.13.0

v.3.2.2 - 2025-03-20
    - Add workaround for bug in suntime module that causes the sunset time result to be one day before the current day
        - When using dynamic brightness control, the display will permanently remain in the night mode brightness
          due to this bug (does not affect ACTIVE_PLANE_BRIGHTNESS)
        - https://github.com/SatAgro/suntime/issues/12#issuecomment-621755084
    - When reloading flyby stats file, we recalculate estimated API usage cost as well

v.3.2.1 - 2025-03-18
    - wow, the fabled 3.2.1 version
    - Changed internal methods on how to handle when the API cost limit is reached: if the usage cost
      decreases below the set amount after checking with FlightAware, API use can resume without having to
      restart FlightGazer
    - Minor logging output tweaks
    - In Interactive mode, the API stats line will now show which API limit was reached, if those settings are enabled

v.3.2.0 - 2025-03-17
    - NEW: Another option for API limiting: API_COST_LIMIT
        - Since API use is already checked upon startup based on the key (v.2.1.2), this setting can now limit
          usage by this metric
        - FlightGazer will also maintain a running cost and also check FlightAware periodically to ensure
          usage remains under this limit
        - Estimated API cost for the day is now shown in Interactive mode
        - Some code refactoring to accommodate this change
    - Re-categorized the config file for better layout
    - Added JOURNEY_PLUS setting (does nothing at the moment)
    - Refined out-of-bounds range and height limiting
    - Minor tweaks to footer formatting in Interactive readout
   
v.3.1.0 - 2025-03-13
    - NEW: New option to use an alternative font for all the small text on the display
        - This 3x5 font is less squared-off and maximizes differences between homoglyphs (eg: '5' vs 'S', 'O' vs '0', etc)
        - Fans of TI-83/84 calculators will recognize this new font (it was adapted by the Author)
    - Display now starts sooner in the startup phase
    - In Enhanced Readout mode, the Track metric now shows an arrow corresponding to the direction shown
        - eg: 90 degrees will show an arrow pointing right (east), 315 degrees pointing upward-left (northwest), etc
        - Finally using some of the changes implemented in v.2.0.0
    - Edits to a few glyphs in the 3x3 font for better clarity
    - Remove 5x8.bdf font from Project as it was never used since the start
    - Created a new 4x4 font just for this project for future use

v.3.0.1 - 2025-03-12
    - When No Filter mode is enabled, set flyby staleness to a minimum of 60 minutes
        - This should cover most cases (and has been since this setting was added) as
          most aircraft can cross the widest portion of an ADS-B receiver's coverage (~500nm) within this time
        - If the flyby staleness value is greater than 60 minutes, this has no effect
    - Minor code cleanups
    - Initialization script now reads version number too

v.3.0.0 - 2025-03-11
    - NEW: 3x3 font created by the author as an exercise in the smallest possible font viable for these RGB matrix screens
    - NEW: Option for extended calendar info on Clock display: month, week number, day of the year
    - NEW: CLOCK_CENTER_ROW setting which supersedes DISPLAY_SUNRISE_SUNSET and DISPLAY_RECEIVER_STATS
        - Now there are two rows of data that can be shown in the center section of the clock display
        - This is customizable, eg: extended calendar info in row 1, sunrise/sunset in row 2, etc
        - Leaving only one row filled will retain previous functionality as before
        - When 2 rows are selected, the display will use the new 3x3 font to maximize space
        - The color for each row can be changed, of course
    - Depreciate RGB_ROW and RGB_COL settings
        - RGBMatrix size is now fixed to 32x64 (there was no point in changing the size anyway)
        - These settings were vestigial remains from v.0.x versions
    - Splash screen now reads version number of FlightGazer
    - Updater script also shows which version of FlightGazer is being pulled from GitHub
    - FlightGazer is now GPLv3 licensed

v.2.10.1 - 2025-03-10
    - If location is not set, display will now show "N/A" for FLYBY and RANGE to indicate this
    - If dump1090 isn't found or we are currently under a watchdog timeout, TRACKING will show "N/A" as well
    - Additional minor display text formatting tweaks
    - Minor text output tweaks

v.2.10.0 - 2025-03-08
    - 10 releases for this version, wow
    - API results cache is now tied to FLYBY_STALENESS
        - If the same aircraft appears within the FLYBY_STALENESS time, it will reuse the same API result
    - Fix undiscovered bug regarding FLYBY_STALENESS since that feature was introduced (v.1.3.0): it didn't fully work (lmao)
        - Caused by subtracting the current time from the last seen time of the aircraft and comparing
          it to the FLYBY_STALENESS time: it always resulted in a negative number. This should've been the other way around. Oops.
    - Change some settings defaults:
        - Sunrise and sunset are now defaulted to true
        - Brightness is now set for ACTIVE_PLANE_BRIGHTNESS
        - Main brightness lowered to 75, secondary brightness lowered to 40
    - Updater script now checks if FlightGazer has been installed in the system
    - Reverted change from v.2.9.2: Initialization script will check RGBMatrixEmulator again
        - The bug for RGBMatrixEmulator has been fixed: (https://github.com/ty-porter/RGBMatrixEmulator/compare/v0.12.3...v0.12.4)

v.2.9.2 - 2025-03-07
    - Initialization script now skips checking RGBMatrixEmulator if it's already installed
        - This is a workaround for when we use the updater; RGBMatrixEmulator will not work until next reboot due to a bug

v.2.9.1 - 2025-03-05
    - Fix update script to handle when we change the color settings file in source (it breaks the display)
        - This bug was caused by how the updater migrates color config: it basically just copies the old one into the new one
        - If there is a reference to a new display element (see: last update), it won't exist after migration
        - The display renderer will crash because it cannot reference the color for the new display element
        - Now we just simply compare line lengths between old and new color config files and just alert the user that colors
          have been reverted to defaults when there is a mismatch
    - The feature creep will continue until morale improves: read CPU temp in Interactive mode
        - Stealing functionality from my other project, UNRAID Status Screen
        - This was mostly just for me
    - Initialization script touch ups

v.2.9.0 - 2025-03-04
    - NEW: a progress bar is now present on the aircraft display when there are two or more aircraft in the area
        - This serves as an indicator of when FlightGazer will switch to another aircraft or
          how long it will display information about the current aircraft
        - The progress bar is also a graphical representation of the algorithm readout added in v.1.5.2
        - This element can be enabled or disabled with a new setting: DISPLAY_SWITCH_PROGRESS_BAR
        - Like all other display elements, the color can be customized
    - Updated docstrings in config file to show the types and range of data that can be accepted
    - In Interactive mode, added notice when the display routine fails, either during setup or at runtime
        - The display thread now has exception handling (it actually never did before), so in the exceedingly rare
          case it breaks, it will restart up to 5 times, then stop displaying output

v.2.8.0 - 2025-03-02
    - NEW: Track a specific aircraft via its ICAO hex, aka FOLLOW_MODE
        - If a specific aircraft enters the reception area of your ADS-B receiver, this will allow FlightGazer to track it
        - This is analogous to tar1090's "Isolate" feature
        - When tracking a specific aircraft, it will enable Enhanced Readout mode for that specific aircraft,
          regardless of the global ENHANCED_READOUT setting
            - If the aircraft enters the set tracking area, it will switch to using the normal flight watching mode if that is available
            - If there are multiple aircraft in the area and FlightGazer switches to this specific aircraft that is outside of the
              tracking area, it will switch to Enhanced Readout
        - In Interactive Mode the specific aircraft to follow will be prefixed with a "-->"
        - On the aircraft display, the callsign is suffixed with a "*"
        - This feature is limited to only one (1) aircraft, and cannot track multiple
    - Modified the letter 'Q' in the 3x5.bdf font for better clarity in callsigns
    - Small code fixes

v.2.7.3 - 2025-02-28
    - Initialization script now has a live/demo mode where it will only setup the environment in /tmp
        - This also does not install the service in systemd
    - Updater script now checks if the service is installed before restarting FlightGazer

v.2.7.2 - 2025-02-27
    - Updater script checks if service is disabled and does not automatically restart the service
    - Initialization script accepts new flags: an install-only/check dependencies mode and enabling verbose mode
    
v.2.7.1 - 2025-02-26
    - Apply tweaks to both updater and uninstaller scripts that should make them more robust to changes in the future
    - Fix tmux checking in main python script

v.2.7.0 - 2025-02-26
    - NEW: Interactive mode now uses colors for better clarity
    - Speed readout moved 1 pixel to the right for better spacing
    - Limit Flyby, Tracking, and Range readout on display if the values exceed what can fit in their sections
        - These limits will almost always never be hit, but they're there now
    - Increased pause length when FlightGazer encounters a dump1090 timeout 
    - Main python script now detects if it's running inside tmux
    - Interactive mode now has a reminder in the footer on how to exit
    - Smoothed splash screen scroll

v.2.6.3 - 2025-02-24
    - Mitigate occurrence when duplicate entires for the same aircraft are present
        - This edge case has been present since v.0.1.0 but did not cause any issues
        - When an aircraft is using both ADS-B and UAT, ADS-B will prevail
        - FlightGazer will always pick the first entry of the same aircraft it encounters, even if another entry has better information
        - This does not affect No-Filter mode
    - Aircraft selection algorithm tweak: once all aircraft in the area are cycled through, pick an aircraft not the last selected one
    - Minor code fixes
    - More typo fixes (it appears I cannot English)

v.2.6.2 - 2025-02-21
    - Improved display module import handling and better logging messages

v.2.6.1 - 2025-02-20
    - Don't play splash screen when "no display" option passed to init script
    - Add banner to updater script
    - Typo fixes

v.2.6.0 - 2025-02-13
    - FIX: Edge case in aircraft selector routine that may have existed before v.1.0.0, causing it to fail to select an aircraft
        - Includes aircraft selector algorithm refactoring for better resillence
        - Also affected fetching and displaying API results as this relies on the aircraft selector to work
    - Minor text tweaks
    - Change more "plane" references to "aircraft" for further consistency
    - Refactored dump1090 and API processing slightly
    - For certain site environments, limit amount of specific logging messages to prevent spamming the log
    - Actually make the default config have FLYBY_STATS_ENABLED set to 'True' (it was not in v.2.5.0, oops)

v.2.5.0 - 2025-02-06
    - NEW: ENHANCED_READOUT_AS_FALLBACK setting
        - If the provided API key fails at startup or if the set API_LIMIT value is reached, switch to using ENHANCED_READOUT
    - NEW: Calculate aircraft elevation from horizon and slant range (aka line-of-sight distance)
        - Available only in Interactive mode
        - As of this update and to the scope of the author's research, no other ADS-B processor offers these calculations
        - NB: angle of elevation assumes the site elevation is 0 (the ground at the local horizon) and not the actual elevation of the site/antenna.
          For distances near the site, using this geometric datum has negligible effect on the accuracy of the calculation.
          At distances closer to the actual radio horizon (using the range outline provided by heywhatsthat), the accuracy
          can be off by a few degrees due to compounding factors such as actual elevation differences (terrain) and the fact that
          the Earth is not a perfect sphere
    - FLYBY_STATS_ENABLED is now defaulted to "True"
    - Changed readable references of "plane" or "planes" to "aircraft" and using the word "aircraft" in documentation henceforth
    - Minor tweaks to dump1090 processing
        - Use the best available altitude (geometric) if available instead of just barometric altitude
        - Take advantage of readsb features if present
    - Further aircraft selection algorithm tweaks
    - Various underlying code tweaks
    - Logging output tweaks

v.2.4.1 - 2025-02-01
    - HOTFIX: Adjusted systemd start timeout for initial setup after update
        - This would cause FlightGazer to never complete its setup and never start
    - Adjusted update script to restart FlightGazer in the background
        - Changed permissions to 644 from 777 as well

v.2.4.0 - 2025-02-01
    - Refactored systemd service and init script to handle system shutdowns more gracefully
        - Important: If you already have FlightGazer (v.1.5.0 - v.2.3.0) installed as a service, 
          you must remove the service file at /etc/systemd/system/flightgazer.service before updating
          to this release. Not doing so will cause the service to report a startup failure!
    - Tweaked plane selection algorithm for cases when a next plane was planned to be selected but
      the plane count changes, which would cause the current focus plane to stay selected longer
    - Filter out "TIS-B Other" type messages as these are usually ground implements rather than aircraft
    - Added verbose mode for main python script for better debugging/logging
        - Added additional stat readouts in console output
    - Changed receiver stats refresh frequency suited for monitoring readsb autogain
    - Removed unused code that was not in use

v.2.3.0 - 2025-01-24
    - NEW: Logging
        - Solves issue of not being able to read script output when started as a service
        - Provides method of getting log output for troubleshooting
        - Overhauled text output due to this addition (console printout of data is unaffected by this change)
    - NEW: Option to control airplane location staleness via new setting, LOCATION_TIMEOUT
        - dump1090's default is to remove planes from its tracking list after not receiving a location for more than 60 seconds
        - This is now a customizable metric that affects displayed total plane count to make it more "real-time"
    - Improved handling of situations when we cannot read dump1090 once FlightGazer is running (eg: internet failing, dump1090 service fails, etc.)
        - Console output will also show a stat only if this occurs while running
        - Additional logic rearrangement as part of this change

v.2.2.0 - 2025-01-23
    - NEW: Colors are no longer hard-coded and can be configured
        - Slight tweaks to blue color preset to improve legibility
        - Additional color presets
    - Updated updater script to migrate color configuration file

v.2.1.2 - 2025-01-22
    - NEW: Added API checking to check both API key validity and to get usage status
        - According to FlightAware, his incurs 0 charges against your API usage (current as of this update)
    - The war with settings validation continues (more fixes)
    - Small code fixes and tweaks
    - Text output tweaks

v.2.1.1 - 2025-01-21
    - Fix permissions of files to owner of FlightGazer install directory when running updater
    
v.2.1.0 - 2025-01-20
    - NEW: New logo
    - NEW: Splash screen (to show off the new logo)
        - Only works if using the init script
        - Now there's something to show when the init script needs to update the working environment
    - Overhauled method to blink callsign
        - The design is now much less janky and much more robust
    - Small tweaks to updater scripts

v.2.0.1 - 2025-01-19
    - HOTFIX: Fix main script not working (failed to start)
        - Caused by settings checker, ironically
    - HOTFIX: Fix updater script
        - Had wrong line endings
        - Also failed to copy over temporary directory
        - Change file ownership to nobody before copying over as we are running as root
        - Re-architected script to be 2 stage to avoid copying over itself

v.2.0.0 - 2025-01-18
    - BREAKING CHANGE: new settings file format
        - Change from using a Python file to YAML for ease of settings migration in the future
        - v.2.0 and newer will not be able to read v.1.x or older settings files
            - If upgrading from v.1.x to v.2 or newer, you must reconfigure your settings manually
                - This affects an estimated one person as of this Version (the author)
    - NEW: Brightness settings based on time of day
        - Switchover based on local sunrise/sunset or manual settings
    - NEW: Brightness setting for when there is an active plane on display
    - NEW: Optional sunrise/sunset times on clock display
        - Requires that location is set/available
    - NEW: Optional receiver stats on main clock display
        - Track receiver gain (if dump1090 autogain is enabled on the device)
        - Also display noise levels and percentage of loud signals
    - NEW: Updater script that will upgrade FlightGazer to the latest commit on GitHub
        - Migrates settings and stats as well
        - Forces the init script to check the FlightGazer virtual environment; startup will take slightly longer after an update
    - NEW: Flight name (callsign/registration) blinks a few times when entering active plane display or a switchover to another plane
        - Grabs attention better and provides clearer indicator of plane switchover
    - Massive code restructuring. Like, a lot of changes. Almost a complete rewrite. gg anyone else using this so far
        - Restructured config file for clarity
        - Numerous code cleanups
        - Refactoring to accommodate for all the added features and any future feature creep
        - Bolstered settings checking to increase resillency against misconfiguration (not unbreakable though)
    - In interactive mode, receiver stats are also shown
    - Updated init script
    - Modified 3x5.bdf font to support arrows and other useful drawing characters
    - Fixed minor bug with plane selection algorithm where it would not loop through planes once all planes have been shown (was present since v.1.4.0)
    - Handle cases when there is an empty callsign (this bug went unnoticed since inception)
    - Further improve display responsiveness
    - This update was originally slated to be v.1.6.0 but the changes snowballed enough to warrant a version bump (understandably)

v.1.5.2 - 2024-12-27
    - Additional text output tweaks for interactive mode
        - Version number now in header
        - When there are two or more planes shown, shows when the selector algorithm will choose another plane
    - Small refactoring

v.1.5.1 - 2024-12-17
    - Create RGBMatrixEmulator settings upon install to suppress harmless error output
        - Update uninstall script to remove RGBMatrixEmulator settings
    - The war on signal handling continues (attempt another fix)

v.1.5.0 - 2024-12-17
    - Depreciate using rc.local for startup, systemd service is now the only startup method
        - By default the script will now run in tmux
        - Improved compatibility when running as a systemd service
    - Even more improved signal handling for main python script
    - RGBMatrixEmulator is now installed by default and is the fallback unless No-Display mode is enabled
        - Restores same functionality found in v0.7.0 to v.0.9.0

v.1.4.2 - 2024-12-17
    - FIXED: HTTP 403 errors due to lack of user-agent in json file requests
    - Some text output tweaks

v.1.4.1 - 2024-12-17
    - init.sh: add ability to create a service via systemd if rc.local doesn't exist
        - Uninstall script updated to disable service as well if this method is used

v.1.4.0 - 2024-12-10
    - NEW: More screen functionality for non-API users via new mode, ENHANCED_READOUT
        - Latitude and longitude readout instead of origin and destination
        - RSSI instead of time
        - Ground track
        - Vertical speed
        - This is a toggleable option and overrides API access; even if a key is given, it will not fetch the API
    - Small plane readout layout tweaks due to above change
    - Minor plane selector algorithm tweak
    - Completely overhauled interactive display routine for more readable layout
    - More plane details in interactive readout to reflect new ENHANCED_READOUT mode
    - Improved screen data refresh responsiveness and switchover

v.1.3.0 - 2024-12-09
    - NEW: User selectable units
        - No longer hard-coded to aeronautical units
        - Added additional internal logic to handle different units
        - Adjusted docstrings
    - NEW: Backward compatibility with older settings files
    - Flyby counter is now more accurate
        - New option: flyby staleness, which determines if a flyby of the same plane can be considered as a flyby if it occurs after a set time

v.1.2.1 - 2024-11-26
    - Add another fallback for checking if another instance of FlightGazer is running, now internal to the python script
    - New process-related stats on console output

v.1.2.0 - 2024-11-25
    - New uninstall script
    - Initialization script now accepts optional arguments which trigger the same options in the python script
        - Can now run automatically inside tmux if present
    - Initialization script now checks if there is an already running instance of FlightGazer

v.1.1.1 - 2024-11-23
    - Create this changelog file
    - Small code refactoring
    - Small console output text changes and display value tweaks
    - Additional thread termination handling
    - Reload current running stats from stats file if it's the same date (useful for if we restart the script)
        - Write out stats upon exit so we don't lose data
    - Finally fix display driver thread not exiting when exit signals are sent (apparently was not fixed from v.0.9.0)

v.1.1.0 - 2024-11-15
    - Add new "No Filters" mode which outputs all detected planes from dump1090 regardless of set range
        - This mode disables API fetching and forces the display to only run as a clock
            - Since our range is no longer small, there is no point using the plane selector algorithm nor doing API fetches
        - This mode is perfect for ADS-B sites that don't receive a lot of traffic (think <200/day)
        - This mode has the same functionality as v.0.1.0
    - Add installation of tmux to the initialization script for convienence

v.1.0.2 - 2024-11-12
    - NEW: Added option to only display output to console (just like how pre-1.0.0 versions were when I was still debugging it)
    - Adjusted when we write to stats file during the day (23:59, before we do the stats reset at midnight, 00:00)
    - Handle case when we use the python script outside of the initialization script and don't pass any arguments

v.1.0.1 - 2024-11-11
    - FIXED: permissions issue of writing to stats file
        - This was caused by rgbmatrix dropping permissions after we initialized/checked we can write to the file
        - Only workaround for now is to keep rgbmatrix retaining root perms during runtime
        - Added logic to display initialization to check if we can drop permissions if we have a stats file/want to write to a stats file
    - Refactored exit text to eliminate reentrant errors
    - Added LED_PWM_BITS setting to adjust display output (default in rgbmatrix is 11, we default to 8 for balance of flicker reduction and color reproduction)

v.1.0.0 - 2024-11-10
    - MILESTONE: Core functionality fully realized 👍
    - Finally solve biggest hurdle of creating logic to match desired display output onto a physical RGB-Matrix display
    - Add argument parsing for python script for the initialization script
        - Initialization script will trigger different modes depending on if we are using an interactive terminal
        - Default mode is to run silently when we're started by a Raspberry pi's rc.local file
    - Retain RGBMatrixEmulator as a selectable option in case we don't have an actual RGB-Matrix display to output to
        - Add in additional logic for switchover capability

v.0.9.0 - 2024-11-09
    - Clock and plane display layouts finalized (thank you RGBMatrixEmulator)
    - Massive code rewrite: depreciated use of almost all code from 'its-a-plane' project
        - We only retain some framework modules; we no longer use separate "scenes"
        - Introduce new internal "display feeder" class for handling display output
    - Fix display driver thread causing it to run again once exit signal was called, requiring program to be exited twice or terminated forcefully
        - Restructured thread initialization timings due to above change to ensure all threads terminate when main thread is signalled to end

v.0.8.0 - 2024-11-08
    - Handle cases when we don't have required resources to drive an RGB-Matrix display
    - Continue work on how to actually produce output to a display (the clock works at least)
    - Repurpose initialization script from my other project "UNRAID Status Screen" for this setup
        - Writes to rc.local on a Raspberry Pi when run for the first time so that subsequent runs will start automatically at boot
    - Lower timeouts when we are probing possible dump1090 locations (used to be 5 seconds, now down to 0.5)

v.0.7.0 - 2024-11-05
    - Add RGBMatrixEmulator into code for display debugging and layout testing (much better than having to run this on real hardware, bless)
    - Move settings to an external file
    - Added brightness setting
    - Added smaller fonts and more colors
    - Refined plane selector algorithm based on real world testing
        - Additional algorithm info displayed in console output
    - Handle edge cases provided by API

v.0.6.0 - 2024-10-23
    - Determine how to utilize FlightAware API
    - Print API results to console
    - Add API call limiter
    - Reorganize directory layout for this project for future modules
    - Add caching structure for API results to minimize calls
    - Begin work on RGB-Matrix display routines by integrating code from 'its-a-plane' by Colin Waddell

v.0.5.0 - 2024-10-22
    - MILESTONE: Cool logo

v.0.4.0 - 2024-10-20
    - Implemented rudimentary selection algorithm for planes inside range
        - Console output also indicates how the algorithm is working
    - Finalize necessary information to pull from dump1090 json

v.0.3.0 - 2024-10-16
    - Figure out cross-thread communication with pydispatcher
    - Added airplane parser class to filter out stats based on desired range

v.0.2.0 - 2024-10-12
    - Add external modules to decode both registrations and country codes associated with ADS-B hex IDs
        - Translated from original javascript sources used in tar1090
        - Required as fallback since not all planes will have a callsign

v.0.1.0 - 2024-10-08
    - Figure out how to parse dump1090 json
    - Add routine to handle different dump1090 locations
    - Figure out how to combine dump978 output as well
    - Add in scheduler for periodic routines
    - Print to console routine

v.pre-alpha - 2024-09
    - what is ADS-B