FlightGazer Changelog
v.V.R.U - Release date
  | | |
  | | `- Update
  | `--- Release
  `----- Version

v.8.3.2 - 2025-10-16
    - Add reading ADS-B emitter category (the self-reported aircraft type) which can be used as a fallback
      when there's no other available information about an aircraft

v.8.3.1 - 2025-10-11
    - When using NO_FILTER mode, the display now uses the heading text "FLGTS" (flights) instead of "FLYBY" to describe the
      amount of aircraft tracked in the day
    - Add new options for RGBMatrixEmulator v0.13.5
    - Add check in the main script to really make sure it's running as root when loading rgbmatrix
    - Some output tweaks for the initialization script

v.8.3.0 - 2025-10-04
    - Release number bump
    - Fix issue that arises when the API returns an empty result caused by the code cleanup in last update
    - The updater script now backs up the current configuration when using the reset flag
    - Improved handling when running in Interactive mode and the initialization process is canceled
    - Numerous code cleanups across multiple components

v.8.2.6 - 2025-10-03
    - Tweak the output of the daily stats to account for NO_FILTER mode, along with better text alignment and output order
    - Minor code cleanup

v.8.2.5 - 2025-10-01
    - Fix edge case when the focus plane changes while waiting for an API result, leading to the wrong API result being used
    - Tweak dxing logic slightly
    - Fix aircraft direction measurement to only be between 0 and 360 degrees

v.8.2.4 - 2025-09-24
    - When using FOLLOW_MODE, freeze-frame data is now logged when the aircraft is first detected
    - Tweak 3x3 font again
    - Other logging output tweaks

v.8.2.3 - 2025-09-24
    - Fix issue where the dxing logic doesn't work when using NO_FILTER mode
    - Tweak 3x3 font so that the '1' glyph is more readable compared to '2', along with other minor changes

v.8.2.2 - 2025-09-22
    - Fix minor issue in LOOP logic when handling aircraft that don't report a valid latitude or longitude

v.8.2.1 - 2025-09-21
    - Filter out low altitude aircraft for the dxing logic (this usually occurs with glitchy ADS-B transponders on general aviation aircraft)
    - Refactored display initialization and exception handling to be more robust
    - More verbose logging when handling atypical exceptions

v.8.2.0 - 2025-09-20
    - NEW: DXing! FlightGazer will now log instances when aircraft are detected beyond the typical limit for ADS-B signals usually due to tropospheric ducting
        - Results of the farthest aircraft are printed at the end of the day or upon exit in the log file
        - If you use the graphs1090 interface, this is a more accurate result compared to looking at the "Peak Range" value on the ADS-B Range graph
        - This is also the equivalent of using the "ptracks" feature in tar1090 and sorting by descending distance, but done automatically
        - The criteria for this to occur is a detected distance greater than 290 nmi
        - This feature is aimed at very well-sited locations and where the above cutoff occurs only a few times a year
    - Aircraft in the state file now have their relative direction have the actual degree measurement along with the cardinal direction
    - Increased logfile length limit to 2000 lines from 1000
    - Add support for advanced settings with RGB matrix setups outside of the expected Adafruit RGB Bonnet and HUB75 displays

v.8.1.2 - 2025-09-10
    - Add logging for uncaught exceptions
    - Synchronization thread will no longer start if dump1090 is not found on startup
    - Operators database update
    - Update the operators_generator file to use a random useragent

v.8.1.1 - 2025-09-04
    - Fix rare edge case that would cause the daily stats reset and API cost querying to fail

v.8.1.0 - 2025-08-29
    - Layout Change:
        - When using JOURNEY_PLUS and SHOW_EVEN_MORE_INFO, the RSSI section is replaced with the track of the aircraft
    - Tweaks for timing control when using a local instance of dump1090
    - Documentation updates

v.8.0.4 - 2025-08-27
    - Fix case where the display would potentially crash if the locale is not in English
        - This is caused by the way the locale outputs the weekday and month names; if the output isn't ASC-II, the font in use
          doesn't have the corresponding glyph to render the required character, thus causing the rendering to fail
    - Optimized time polling for the clock to reduce the amount of function calls, making rendering faster when the clock is shown
    - For clarity, the alternative font is used when JOURNEY_PLUS is enabled and the API returns a result with 4 or more characters

v.8.0.3 - 2025-08-26
    - Fix the edge case fix from the last update
        - This would cause the distance readout on the active display to get clipped when the origin or destination changed in JOURNEY_PLUS
    - Tweak some descriptions in the config file to match the better descriptions used on web-app interface
    - Modify webapp service file so that it will attempt to restart itself if it fails to start successfully following an update
        - Only affects new installs

v.8.0.2 - 2025-08-24
    - FIX: Low display framerate when using JOURNEY_PLUS and SHOW_EVEN_MORE_INFO
    - Fix edge case when pixels aren't cleared when using JOURNEY_PLUS and the API returns a coordinate instead of airport codes
    - More reliable detection when an aircraft is on the ground when using the more accurate geometric altitude

v.8.0.1 - 2025-08-22
    - FIX: Distance calculation when using non-aeronautical units and using readsb-provided data
    - Daily stats output tweaks:
        - When running in NO_FILTER mode, selection event counts is no longer written
        - Fix minor edge case when there are aircraft in the area at the time the daily stats are polled and
          the rare selection event count is reset before it could be written, leading to this stat never being shown
    - Add validation for BRIGHTNESS_SWITCH_TIME to make sure sunrise occurs before sunset
    - When installing the webapp service file, access logging is no longer enabled by default (only affects new installs)

v.8.0.0 - 2025-08-15
    - The selection algorithm continues to become smarter
        - FlightGazer now estimates the next position of an aircraft based on its speed and heading
        - If the next position is calculated to be outside of the designated RANGE, it won't select the aircraft
        - This new feature also enables FlightGazer to ignore "glancing" approaches
            - If an aircraft is detected at the edge of the tracking area but it's calculated to leave on the next loop,
              we don't bother tracking it
            - Incorporating this new feature required a partial rewrite of the selection algorithm
    - FlightGazer will now try to synchronize itself with the dump1090 json to minimize the time difference between them
        - Since these two separate systems are periodic but not synchronized, they will naturally drift from one another
        - This new internal feature is designed to control that drift and maintain consistent data age, especially as system
          load changes throughout the day
        - This also works when FlightGazer is operating across a network and can accommodate for differences between system times,
          all without having to do any kind of additional querying
            - Adapts to the inherent drift between two different system clocks as well
        - All the tracking of internal processing time added over the versions is now bearing useful fruit
        - Uses a hand-tuned PID controller to achieve convergence and enable this form of phase-locked loop
    - Even more [sic] gameing: Adaptive and variable refresh rate
        - When on the clock screen the display renders at 10 FPS
        - If SHOW_EVEN_MORE_INFO is enabled and the aircraft display is shown, the update speed increases to 24 FPS
        - There is now internal logic that continually changes the frame times in order to maintain the target frame rate
            - This significantly improves display performance due to varying system load or when using RGBMatrixEmulator
        - The FPS meter added in v.3.5.0 is no longer feature creep and is now actually useful
        - Depreciate and remove the the frames.py file that was in use since v.0.8.0 as we now control the frame rate internally
    - Further refined API cost tracking calculations
        - When polling the API for usage costs, the costs are not realtime. If the last API call occurred about 15 minutes
          before the daily query is done, it's safe to assume what the API returns is the more accurate value and this is used
          - Previously, a small buffer cost was maintained to play it safe
    - If a previously tracked aircraft has an API result when it was airborne and is detected again when its on the ground
      before the FLYBY_STALENESS time, the API result will not be used/shown
    - New keys added to the state file:
        - Aircraft now have a "Staleness" key that represents age of the position data
            - This value has always been evaluated since v.0.1.0 as it's part of the dump1090 data,
              and has been used by the LOCATION_TIMEOUT feature added in v.2.3.0. Timing data is also used in the above
              position predictor feature. Additionally, the value written to the state file is corrected using the timing data derived for synchronization
        - Aircraft also now have "FutureLatitude", "FutureLongitude", and "FutureDistance" keys to reflect the added future position calculation
        - Additional keys for the json age and derived correction factors
    - In ENHANCED_READOUT, the RSSI header text on the display when using the smallest font has been shifted one pixel to the right for better alignment
    - The main python script is now >300 KiB and >6000 lines
        - Really, how does this all still work, lmao

v.7.3.1 - 2025-08-06
    - Fix watchdog handling regarding change done in v.7.1.2 (it actually didn't get triggered faster when there were sequential failures)
    - Initialization script no longer checks what the home directory is on every startup
    - Following an update or dependency check, pip is checked again in the virtual environment (this check was removed in v.6.0.4)
    - Minor tweak to 4x4 font again, this time shifting the 'T' glyph one pixel left for better layout

v.7.3.0 - 2025-08-04
    - Big optimization tweaks for the main data loop processing
        - If FlightGazer is connected to readsb, filtering and processing is now faster by almost 1.5x
        - When operating in NO_FILTER mode, there is up to a 10x speedup (tested with about 400 aircraft)
        - When an aircraft enters the area, lookups using the tar1090 database, callsigns, registrations, and country codes
          only occurs once rather than on each loop cycle, significantly shortening subsequent processing
        - Other optimization improvements
    - Initialization script improvements:
        - Improved rgbmatrix detection
        - If the rgbmatrix library exists but isn't available globally, the initialization script will try to install it
          in the virtual environment
        - Output tweaks
    - Lowered threshold for a site being deemed "really active" from 800 flybys to 700
    - Fix minor issue where the high priority event count doesn't reset (existed since v.5.1.0)
    - Splash screen now has the same feature added in v.7.2.1

v.7.2.3 - 2025-07-28
    - Minor tweak to 4x4 font for better consistency

v.7.2.2 - 2025-07-23
    - HOTFIX: Fix critical issue caused by v.7.2.1 that would cause FlightGazer to fail to start (lmao)
    - Quieted initialization script output for the change done in v.7.2.1

v.7.2.1 - 2025-07-23
    - Improved home directory lookup for some setup routines based on where FlightGazer is installed instead of
      relying on which user is running the actual script

v.7.2.0 - 2025-07-22
    - FlightGazer now has a second splash screen that starts as early as possible in the boot sequence
        - Used to fill in the gap between when the system is started and FlightGazer service starts (usually a few seconds up to a minute)
        - Useful as an indicator when the system hasn't fully booted yet and there's something preventing it from doing so
          (the FlightGazer service doesn't start until everything is up)
        - This feature only affects new installs moving forward. If you already have FlightGazer installed, you must
          manually remove the service file at '/etc/systemd/system/flightgazer.service' and run the FlightGazer initialization
          script with the '-c' flag to enable this new feature added in this version
        - Extended FlightGazer service startup timeout to 12 minutes from 10
    - Optimizations for the data processing loop
    - Further improve API cost tracking calculations
    - Initialization script now does some rudimentary hardware checking to alert the user if it's suitable to run FlightGazer
    - If the initialization script needs to check the dependencies and isn't able to connect to the internet, it will do the checks
      the next time the script runs

v.7.1.2 - 2025-07-18
    - Tweaks in how the watchdog is triggered when there are sequential failures connecting to dump1090
    - Very minor text tweaks to the web app install script
    - Very slight tweak to how some numerical values for settings are handled

v.7.1.1 - 2025-07-17
    - Add functionality to the update script to reset the configuration if desired
    - Minor improvements with the web interface install script
    - Revert default marquee color change (adds back more color variety [less orange])
    - Make the SAKURA_PINK color preset a little brighter

v.7.1.0 - 2025-07-17
    - FlightGazer now handles the case where the rgbmatrix library is present but is not actually installed
    - Refactored path handling in main python script
    - Splash screen now inherits the RGB matrix settings present in the config file
    - Initialization script now handles cases when the install/dependency check is interrupted or stopped
    - Improvements with script files for the web interface:
        - Initialization script will also check dependencies for the web interface if it's installed
        - Web app install script now checks the dependencies in the virtual environment when running an update
        - Adjusted web interface systemd service file to not start FlightGazer upon restarting the service itself
        - Tweak update script to work better with the web interface
    - Add additional color presets and fix the long-standing incorrect color names for PINK and PINK_DARK
      (this update will reset your color preferences)
      - This naming convention was a remnant of when FlightGazer was borrowing the layout for the 'its-a-plane' project
      - PINK -> MAGENTA, PINK_DARK -> GRAPE_PURPLE (PINK_DARK removed), PURPLE -> PURPLE_DARK, PURPLE has been updated to be brighter
        - Some default colors have been changed, mostly those that referenced the old purple colors
    - Shift origin airport code leftwards one pixel in JOURNEY_PLUS mode when it uses 4 characters

v.7.0.2 - 2025-07-15
    - Fix issue with web interface failing to restart if an update to the web interface is installed
        - Caused by the service file settings, which kills the update script that initiates the restart, therefore
          never starting the service
    - Additional tweaks to the update script

v.7.0.1 - 2025-07-14
    - Minor changes to the update and web app install scripts

v.7.0.0 - 2025-07-14
    - FlightGazer now has a web interface!
        - This web app can be installed with a new script: `install-FlightGazer-webapp.sh`
            - It is not automatically installed and requires FlightGazer to be installed on the system first
        - Accessible via the page /flightgazer on the device running FlightGazer (eg: http://192.168.xxx.xxx/flightgazer)
          or via port 9898 if no web server is available
        - It's now easier and more intuitive to change the configuration and colors instead of going to the files themselves
        - Logs and current state are now easily accessible rather than having to query them via a command line
        - Updates can be done directly though a web browser
        - Startup options can be changed
        - Restart, stop, or start the FlightGazer service directly as well
        - Supports light and dark themes
        - Full disclosure: This web app (besides the setup/uninstall/update scripts) was vibe coded, but has been tested to mostly work
          and has some manual corrections the LLM couldn't figure out exactly (web design hard, respect to full stack devs)
    - Fix issue where API fails to be re-enabled when there are credits available again due to the reset mechanism not actually
      resetting the baseline cost tracker
    - Numerous integrations to handle the web interface:
        - Update initialization script to handle when the web interface is running
        - Update updater script to also check for updates for the web interface
            - Modify the interactive routine slightly so that the web app can interface with it as well
        - Update uninstall script to also handle uninstalling the web interface service
        - Settings migrator now preserves quotes in settings
    - Add another color preset and change default color for the marquee (I think the peach color looks nicer)
    - Add another easter egg for one of the existing easter eggs

v.6.0.4 - 2025-07-05
    - Init script improvements:
        - Dependency installation and checks are now faster when doing an upgrade or fresh install
        - Fix splash screen not starting if rgbmatrix is not installed but RGBMatrixEmulator is available

v.6.0.3 - 2025-07-02
    - Display sub-modules now don't error out following the fix implemented in v.6.0.1
        - This change will reset the color config
    - Fix state file not being written out when running in non-interactive mode
    - Slight tweak in how the flight override logging is handled
    - Init script now also installs numpy if it's not installed on the system (this is also a dependency of RGBMatrixEmulator)
        - Lore drop: FlightGazer should now be able to fully run on i686 systems (tested with a Northwood Pentium 4 running Linux Mint LMDE6)
            - v.1.3.0 was the first version to undergo i686 testing but RGBMatrixEmulator failed to build and thus FlightGazer
              only ran in console-only mode
    - Minor interactive text output tweaks for API results

v.6.0.2 - 2025-07-01
    - Improved handling when operating on a local instance and the dump1090 service isn't available
    - Aircraft database downloader changes:
        - The script now fully rebuilds the database instead of updating entries for better accuracy and consistency
        - The script also handles instances when it fails to commit to the database (eg, terminates when writing out)
          and forces a complete rebuild of the database itself

v.6.0.1 - 2025-07-01
    - FIX: Display crashing when the rgbmatrix library is installed but emulation is enabled
        - This bug went unnoticed since at least v.1.0.0
    - FIX: Fix state file thread not running when operating in both console-only and NO_FILTER mode
    - Initialization script improvements:
        - When using the "check" flag, the init script forces a check of dependencies rather than obeying the existence of the first run complete flag
        - Writes out the first run complete flag after the database downloader completes
        - Install libjpeg-dev to help mitigate RGBMatrixEmulator installation failures
    - Minor tweaks for update script to handle permissions better when upgrading
    - Add memory control fixes for database downloader script to handle very low memory devices (eg: Raspberry Pi Zero)

v.6.0.0 - 2025-06-29
    - NEW: FlightGazer x tar1090
        - FlightGazer now uses the same database that tar1090 uses, enabling lookups for aircraft info such as type and owner, all without
          having to use an API
          - This is the same info that can be seen when visiting ADS-B aggregator sites like adsb.lol, adsb.fi, airplanes.live, or adsbexchange
            and selecting an aircraft
        - This project does not bundle the database by default, rather, it downloads the latest version available online and converts it into
          a sqlite3 database arranged for FlightGazer's use
          - This only occurs during initial setup and when updating FlightGazer with the initialization script
        - There are now additional keys available in the state file for database stats
        - Another significant rewrite to handle accessing the database, arbitrating the info, and formatting the output
    - NEW: Scrolling info (for the above add-in), enabled by default with new setting: SHOW_EVEN_MORE_INFO
        - Shows aircraft info, airline or owner, along with a more detailed explanation of the origin and destination
            - Example: "2025 Boeing 787-9 Dreamliner | United Airlines --- San Francisco to Singapore (San Francisco Intl to Singapore Changi)"
        - Available in JOURNEY_PLUS or ENHANCED_READOUT mode
            - Supplants the center readout for JOURNEY_PLUS mode (aircraft track and vertical speed)
        - To accommodate this change, the refresh rate of the screen has been bumped up to 24 FPS from 10 for smooth scrolling
        - An adage from the start of this project was to not include scrolling, but since FlightGazer has evolved into a very comprehensive
          flight tracking program, this feature is now justified
          - The forward-facing creation of the 4x4 font (added in v.3.1.0) is now fully realized
          - FlightGazer is now closer to its roots of being inspired by the original 'its-a-plane-python' project while still offering way more functionality
        - This is essentially end-game layout for FlightGazer; at this point there will likely be no more feature add-ins for the display layouts
    - Slightly modified existing fonts:
        - Modified 'e', 'i', 'W', and '|' with other minor changes in 4x4 font for better readability for scrolling; 4x4 font is no longer strictly monospace
        - Fixed some spacing issues with the alternative 3x5 font
        - Minor tweaks to arrows in the 3x3 font
    - When calling the API, FlightGazer also retrieves the airport names and city from the result
    - Updated operators_generator.py to now pull data from Wikipedia to supplement friendly names for airline operators
        - The operators.py file now has new keys to facilitate this additional information
    - Splash screen improvements:
        - Added neat fade animation to the top text and added a spinner as well
        - Splash says "now updating" instead of the more generic "now loading" following an update or when checking for updates
    - Minor tweaks to the Interactive mode printout for all the above changes
    - The colors config file as additional color presets, along with some slight tweaks to existing presets for better readability
    - Refactored internal CPU and memory usage monitoring
    - Display now starts even earlier in the startup process
    - As a processing optimization, the state file thread waits to write out once all the main threads are finished
    - Adjusted some docstrings in the config file
    - Updated the registration lookup module to handle more South Korean ICAO addresses

v.5.1.0 - 2025-06-20
    - NEW: More selection algorithm tweaks
        - FlightGazer now has the concept of a "high priority" aircraft wherein if an aircraft is within 0.4nmi line-of-sight of your site
          (eg: a low flying plane or helicopter) while there are other aircraft in the area, FlightGazer will temporarily override
          whatever aircraft is currently being tracked and will switch to this one and continue tracking it until it leaves this tracking "dome"
          - If there happens to be multiple aircraft within this dome, FlightGazer will simply pick whichever is closest
    - FIX: Bug in registration lookup module (added in v.0.2.0) that went undetected since it was added that would cause it to fail with specific
           ICAO hexes
    - Refactored registration lookup module to be 7x faster
    - Raised some settings minimums to be more realistic:
        - RANGE value to 0.5 from 0.2
        - HEIGHT_LIMIT to 2500 from 1000
        - FLYBY_STALENESS to 2 from 1
    - Slight refactoring to the API call routines for less jank and less module imports
    - Minor fix to API call tracking for the API_DAILY_LIMIT setting to include calls that did not return usable results
    - Depreciate CALLSIGN_LOOKUP setting
        - This feature is stable and performant enough to be left enabled at all times

v.5.0.0 - 2025-06-14
    - NEW: API_SCHEDULE
        - Why use API credits when you're asleep or at work? Set a time of day to use the API to show an aircraft's flight info
        - Granular by the hour and by weekday for flexible API usage to stretch your credits further
        - Another backburner idea that has finally been implemented (brainstormed around v.3.2.0 release)
        - Disabled by default
    - Significant enhancements when using UAT:
        - FlightGazer is now smarter: instead of just accepting the first occurrence of an aircraft (implemented in v.2.6.3), it will pick
          the data packet that has the best data source; tar1090 handles this in a similar manner
            - A common situation is when an aircraft is detected both as adsb_icao on one frequency and adsr_icao/tisb_icao on the other;
              usually, the adsr_icao/tisb_icao signal is weaker and is prone to dropping out or retaining stale data.
              If the adsr_icao/tisb_icao signal was the first one detected, FlightGazer would latch onto this,
              leading to the aircraft data not being updated while there's a much better info stream available
        - In Interactive mode, the RSSI section of an aircraft will have "(UAT)" appended to it when data was received by dump978
        - On the display, a small dot near the callsign will light up to indicate the currently tracked aircraft is received by dump978
            - As usual, this color can be customized (upgrading to this release will return any changed colors to their defaults)
        - Speed tweaks when accessing both ADS-B and UAT: FlightGazer will try to access them concurrently rather than sequentially,
          shortening both response and processing times (up to 2x faster, usually 1.4-1.6x faster)
    - Major aircraft selection algorithm improvements:
        - When there are multiple aircraft in the area, the algorithm will try to choose an aircraft that is approaching your site location the fastest
          rather than at random, which was how the algorithm used to work since inception
            - A new internal framework was built to calculate this and each aircraft now has an "ApproachRate" value tied to it
            - The approach rate can be seen in verbose mode or in the state file
    - Rearrangement and refactoring of internal FlightGazer functions for better clarity and minimal impact on processing speed
        - Refactor internal dump1090 processing and internal data format for less jank (hasn't been changed since the start)
        - Print routine for Interactive mode now runs in its own separate thread
        - Additional cleanups for the Interactive mode print routine for faster speed
        - Other miscellaneous rewrites to make things more pythonic
    - API processing improvements:
        - API will not be fetched for aircraft on the ground or have non-ICAO addresses
        - Logic improvements when handling ENHANCED_READOUT_AS_FALLBACK to accommodate the (now 3) API limiters
        - Slightly faster internal API result cache lookup
        - Fix issues where FlightGazer would...
            - ... not send an API call when switching from an aircraft being tracked in FOLLOW_MODE to an aircraft inside
              the designated RANGE
            - ... fail to poll the API usage stats when ENHANCED_READOUT_AS_FALLBACK is enabled and an API limiter is enabled
            - ... reuse stale API results when an API limiter is reached and an aircraft re-enters the set RANGE during this time
        - Lore drop and fun facts:
            - None of these API processing routines have been tested since v.1.1.0. The author actually lost API access for months (lmao)
            - As of this release, all associated API handling routines and changes done since v.1.1.0 have now been validated (the author regained API access)
            - Surprisingly, most of the added stuff actually worked when tested (epic)
    - State file changes:
        - If NO_FILTER mode is enabled, state file will not have any aircraft listed in the "relevant_planes" key
        - When FlightGazer shuts down, the state file no longer will exist
        - Fix bug in state file writing thread where it would fail to start when RANGE or HEIGHT_LIMIT values are floats
    - Updater script changes:
        - Script is now interactive, checks version numbers, and allows the user to evaluate before committing the update
        - Script is no longer two-stage (change introduced in v.2.0.1)
        - Script now cleans up after itself (removes what it writes in /tmp)
        - Settings migrator updated to handle API_SCHEDULE
        - Updater script now preserves the migration logs during an update
    - Initialization script tweaks
        - FlightGazer now starts with higher CPU and I/O priority for more consistent performance in data retrieval and data processing
        - FlightGazer starts with fewer PIDs
    - NEW: When FOLLOW_MODE is enabled, FlightGazer will log when the aircraft is first detected in the day
    - In Interactive mode, aircraft are now numbered by their first appearance in the defined tracking area
    - FlightGazer can detect when the connection to dump1090 continually fails (ex: lost network connection) and will trigger the watchdog faster
    - With 24 hour mode, the clock is now more centered
    - Rearrangement of config file sections and some settings
    - tisb_trackfile locations are also no longer tracked (these are more common on UAT)
    - Minor fix to operator lookup cache method
    - Fixed FlightGazer not polling location if GPS is attached (this bug went unnoticed since v.1.1.0)
        - This feature remains untested but should work (as long as whichever dump1090 service is in use updates its receiver.json file)
    - Update splash screen with same fix implemented in v.3.4.1
    - Add another easter egg
    - Originally slated as v.4.3.0 but as usual the addons (feature creep) and changes were large enough justify another version bump
        - This ended up being the biggest rewrite since v.2.0.0

v.4.2.6 - 2025-05-21
    - API usage tweaks
        - FlightGazer does not permanently disable API use on startup if the current usage cost exceeds the set API_COST_LIMIT
            - This allows API usage to resume automatically once there are credits available again without having to restart FlightGazer
        - Errors when polling API usage are now written to the log without having to set Verbose mode
    - Additional log output tweaks

v.4.2.5 - 2025-05-20
    - CALLSIGN_LOOKUP feature now takes advantage of the tar1090 database if it's enabled
        - Increases chances that the operator can be found when the callsign isn't a normal ICAO airline code
    - In verbose mode, the aircraft's registration is printed out in Interactive mode
        - The aircraft registration can also be seen in the state export json regardless of verbose mode
    - Less spam from the rare event printout
        - If at any point the number of selection events in a day exceed 1000, all rare event messages will suppressed until FlightGazer is restarted
        - Lowered limit for daily printouts to 4 otherwise
    - API fetcher will no longer attempt to look up TIS-B aircraft with non-ICAO addresses

v.4.2.4 - 2025-05-10
    - Added message in init script explaining what to do when there is a running instance of FlightGazer
    - Minor log output change, now there is a message when all checks have passed
    - Added easter egg
    
v.4.2.3 - 2025-05-06
    - Fix the edge case fix from the last release (it didn't actually work)
    - More code cleanups

v.4.2.2 - 2025-05-05
    - If the rare event algorithm is triggered, its counter is now shown in Interactive mode without having to enable Verbose mode
    - Fix edge case where the selection algorithm resets the rare event count before the daily stats is printed out
    - Other log output tweaks

v.4.2.1 - 2025-05-01
    - Fix minor log output issue where the aircraft selection metric does not get written out at the end of day if there are no rare selection events
    - Remove excess spaces in main python file and initialization script

v.4.2.0 - 2025-05-01
    - NEW: New feature - CALLSIGN_LOOKUP
        - Only in Interactive mode: when this setting is enabled, any aircraft will display the aircraft operator and associated call sign (telephony name)
        - Relies on an internal database/lookup table with no need for using an API
            - From testing, worst case lookup takes 2 ms. Once a result is cached, lookup takes <0.1ms. Blazing fast.
            - The internal database is based on data from the Federal Aviation Administration, Directive No. JO 7340.2N, Chapter 3, Section 3
        - This feature may be used to build additonal features (the glorious feature creep) in the future
        - Written as an exercise in HTML conversion into a pythonic database with corresponding lookup routines, all with the goal of maximal speed
    - Slightly better console clear routine
    - Minor code cleanups in some of the utilities modules that haven't been touched since the start of this project

v.4.1.1 - 2025-04-23
    - Refactored console clear routine so that it no longer spawns new processes
        - Running FlightGazer over time would bump system PID values to very high numbers because of this.
          This is not a problem for the underlying OS but seeing FlightGazer do this did not sit well
        - Only downside is that the terminal that FlightGazer runs in needs to be able to interpret ANSI escape sequences
            - This should be fine for the majority of terminals that FlightGazer should run in. The change that occurred
              in v.2.7.0 actually set this precedent
        - Upside: console print times are up to 10x faster

v.4.1.0 - 2025-04-18
    - Sharing is caring: FlightGazer now writes to a json file like how dump1090 does it for other applications to read from
        - On linux systems the file is stored in /run/FlightGazer
        - The keys that are output should mostly be stable as of this release and reflect almost all the data that
          FlightGazer processes internally
        - This functionality is enabled by default with the setting WRITE_STATE
    - Another refactoring for the Interactive print display routine
        - It's finally pythonic for the nerds out there
    - The 'rare event' message counter (if you've never seen it yet, then your ADS-B site isn't that active) will reset itself 
      at the end of the day instead of when it occurs again, which could happen anywhere between the next day and never
        - Updated log output for this change as well
    - FlightGazer will now no longer run if it can neither find dump1090 or load the display upon startup
    - The feature creep has hit a milestone: the main python script is now >200 KiB in size
        - How does this all still work? lmao
    
v.4.0.0 - 2025-04-15
    - Refactoring for significantly faster dump1090 data processing
        - Anywhere from 3-8x speedup versus the original processing methods used since the v.0.x days
            - On a Raspberry Pi Zero 2W, this process would take 25-50 ms with an aircraft.json file of 250 aircraft,
              it's now down to 8-20 ms, even with dump978 present
        - Switch to a faster (2-3x) json processing library for dump1090 decoding
    - FlightGazer will now try to read dump1090 data directly if it's running on the same system as the ADS-B decoder itself
        - This feature is enabled by default with a new setting: PREFER_LOCAL
        - Improves response times by 10-20x as we no longer are dealing with the overhead of going over the network
        - This new ability also enables FlightGazer to work with AirNav's rbfeeder and Flightradar24's Pi24 setups,
          which don't have a web interface or don't supply dump1090 data access over the network
        - FlightGazer can also directly connect to Ultrafeeder as well
            - For adsb.im users, this keeps FlightGazer from spamming the webproxy logs (System -> Logs)
        - If FlightGazer is unable to find anything running locally, it will still try to use its default method of figuring out
          how to access dump1090
        - Lore drop: this feature was originally brainstormed back in v.0.1.0, but accessing over the network proved more flexible
          at the expense of having to go through slower networking methods in order to access dump1090, especially during development.
    - Improved dump1090 response times by ~1.25x using connection pooling offered by Requests when using the network
    - NEW: Enable faster refresh rate with FASTER_REFRESH setting
        - Since the start of this project, FlightGazer only polled every 2 seconds
        - FASTER_REFRESH brings that down to 1 second when enabled
    - Processing time stat now includes the time to parse the dump1090 json, making it more accurate
        - Processing time is now defined as the time to process the major components of FlightGazer:
          json parsing, filtering, aircraft selection algorithm, and formatting for the display
          - The individual times for each of these sections can be seen when Verbose mode is enabled
    - Additional details shown in Interactive mode when Verbose mode is enabled
        - The original processing time stat has been relabeled "Filtering+algorithm"
        - dump1090 json size, transfer speed, and processing speed can be now tracked as well
    - Tweaked directional arrows in 4x4 font to be more consistent in their position
    - Originally slated as v.3.6.0 but performance improvements and added capabilities were large enough to warrant a Version bump

v.3.5.0 - 2025-04-11
    - [sic] Gameing! There's an FPS counter for the display renderer because we love feature creep here (and I like the stats)
        - The FPS display now takes the place of the display formatting stat in Interactive mode
    - Handle rare edge case when the Interactive print display routine encounters a KeyError
        - This bug has been associated when a system is heavily IO bound/thrashing (eg: Raspberry Pi Zero) and the processing
          threads no longer are in lockstep with one another, leading to a mismatch in the data that the print display routine reads from
        - Additionally, another sign the system is thrashing is the appearance of numerous messages from the "Clock-Tower" thread in the logs
        - Very minor change to aircraft selection algorithm that may make it further resilient to thrashing scenarios
    - Improved formatting for footer in Interactive mode
        - Footer section adjusts what stats to show based on startup (eg: NO_DISPLAY_MODE, etc)
    - More accurate stat for dump1090 response times
        - The time taken to process the dump1090 json is now measured and the response stat is calculated to account for this
        - When also connected to dump978, the footer text will show "dump1090+dump978" to reflect the combined response time for both
          (it has always been this way)
    - Improved center alignment with the center readout in JOURNEY_PLUS mode
    - When Verbose mode is enabled, actually show verbose data in Interactive mode
    - Adjusted logging messages
    - Initialization script now shows how many lines the log file had before truncation

v.3.4.4 - 2025-03-31
    - Increase dump1090 timeout tolerance
    - Another fix for the fix in v.3.4.3
    - Very minor tweak to Interactive readout
    - The 'V' glyph from the alternative font matches the default font for better readability
        - 'V' could be misinterpreted as 'Y'

v.3.4.3 - 2025-03-31
    - Fix minor UI issue where the 3x3 font would be used when both JOURNEY_PLUS and ENHANCED_READOUT is enabled

v.3.4.2 - 2025-03-30
    - Callsign now only uses the alternative font to reduce ambiguity with letters and numbers
        - All other readouts will still obey the ALTERNATIVE_FONT setting
    - Take advantage of additional readsb features if present when parsing ADS-B info

v.3.4.1 - 2025-03-28
    - Fix long-standing workaround (implemented v.1.5.1) for RGBMatrixEmulator writing its config file outside of FlightGazer
        - The RGBMatrixEmulator config file is now contained within the FlightGazer directory as
          FlightGazer overrides where RGBMatrixEmulator looks for its own configuration file
        - Updated initialization script to handle RGBMatrixEmulator 0.13.1 changes
    - Init script now waits 3 months between checks to start updating python dependencies
    - Improved display exception handling
    - Updater script will now try to gracefully shutdown non-systemd instances of FlightGazer running in tmux

v.3.4.0 - 2025-03-27
    - NEW: The best of both worlds: Enhanced Readout + the original journey indicators
        - Aircraft track, vertical speed, and RSSI are now shown at the same time along with origin, destination, and flight time readout
        - Can be enabled with the JOURNEY_PLUS setting
    - Adjusted 4x4 font for better readability and with more drawing symbols
    - Refactored and optimized formatting routines for faster performance

v.3.3.1 - 2025-03-26
    - FlightGazer will now detect if the time changes (eg from a system reboot, DST, etc)
        - Does nothing other than write to the log
    - Removed depreciated code that could break FlightGazer under specific environments

v.3.3.0 - 2025-03-24
    - Massively improved display responsiveness to data changes when showing active aircraft info
        - Was caused by the DisplayFeeder routine reading data before the internal aircraft selector algorithm
          could finish, thus the data readout lagged behind by 1 refresh cycle.
          This affected the switchover and when the display would show updated info when switching aircraft.
          - This was present since v.1.0.0
        - Refactored all internal display routines to maximize responsiveness and to take advantage of unused but existing methods
        - This should be as responsive as it gets without having to increase the internal tick rate
            - For the nerds reading this, this value has been 10Hz since inception
    - Introduce log housekeeping: init script will check and keep the latest 1000 lines of the log
    - Minor log output tweaks (as usual)
    - Modify configuration file for RGBMatrixEmulator to take advantage of newer pixel look
        - Only affects new installs
        - https://github.com/ty-porter/RGBMatrixEmulator/releases/tag/v0.13.0

v.3.2.2 - 2025-03-20
    - Add workaround for bug in suntime module that causes the sunset time result to be one day before the current day
        - When using dynamic brightness control, the display will permanently remain in the night mode brightness
          due to this bug (does not affect ACTIVE_PLANE_BRIGHTNESS)
        - https://github.com/SatAgro/suntime/issues/12#issuecomment-621755084
    - When reloading flyby stats file, we recalculate estimated API usage cost as well

v.3.2.1 - 2025-03-18
    - wow, the fabled 3.2.1 version
    - Changed internal methods on how to handle when the API cost limit is reached: if the usage cost
      decreases below the set amount after checking with FlightAware, API use can resume without having to
      restart FlightGazer
    - Minor logging output tweaks
    - In Interactive mode, the API stats line will now show which API limit was reached, if those settings are enabled

v.3.2.0 - 2025-03-17
    - NEW: Another option for API limiting: API_COST_LIMIT
        - Since API use is already checked upon startup based on the key (v.2.1.2), this setting can now limit
          usage by this metric
        - FlightGazer will also maintain a running cost and also check FlightAware periodically to ensure
          usage remains under this limit
        - Estimated API cost for the day is now shown in Interactive mode
        - Some code refactoring to accommodate this change
    - Re-categorized the config file for better layout
    - Added JOURNEY_PLUS setting (does nothing at the moment)
    - Refined out-of-bounds range and height limiting
    - Minor tweaks to footer formatting in Interactive readout
   
v.3.1.0 - 2025-03-13
    - NEW: New option to use an alternative font for all the small text on the display
        - This 3x5 font is less squared-off and maximizes differences between homoglyphs (eg: '5' vs 'S', 'O' vs '0', etc)
        - Fans of TI-83/84 calculators will recognize this new font (it was adapted by the Author)
    - Display now starts sooner in the startup phase
    - In Enhanced Readout mode, the Track metric now shows an arrow corresponding to the direction shown
        - eg: 90 degrees will show an arrow pointing right (east), 315 degrees pointing upward-left (northwest), etc
        - Finally using some of the changes implemented in v.2.0.0
    - Edits to a few glyphs in the 3x3 font for better clarity
    - Remove 5x8.bdf font from Project as it was never used since the start
    - Created a new 4x4 font just for this project for future use

v.3.0.1 - 2025-03-12
    - When No Filter mode is enabled, set flyby staleness to a minimum of 60 minutes
        - This should cover most cases (and has been since this setting was added) as
          most aircraft can cross the widest portion of an ADS-B receiver's coverage (~500nm) within this time
        - If the flyby staleness value is greater than 60 minutes, this has no effect
    - Minor code cleanups
    - Initialization script now reads version number too

v.3.0.0 - 2025-03-11
    - NEW: 3x3 font created by the author as an exercise in the smallest possible font viable for these RGB matrix screens
    - NEW: Option for extended calendar info on Clock display: month, week number, day of the year
    - NEW: CLOCK_CENTER_ROW setting which supersedes DISPLAY_SUNRISE_SUNSET and DISPLAY_RECEIVER_STATS
        - Now there are two rows of data that can be shown in the center section of the clock display
        - This is customizable, eg: extended calendar info in row 1, sunrise/sunset in row 2, etc
        - Leaving only one row filled will retain previous functionality as before
        - When 2 rows are selected, the display will use the new 3x3 font to maximize space
        - The color for each row can be changed, of course
    - Depreciate RGB_ROW and RGB_COL settings
        - RGBMatrix size is now fixed to 32x64 (there was no point in changing the size anyway)
        - These settings were vestigial remains from v.0.x versions
    - Splash screen now reads version number of FlightGazer
    - Updater script also shows which version of FlightGazer is being pulled from GitHub
    - FlightGazer is now GPLv3 licensed

v.2.10.1 - 2025-03-10
    - If location is not set, display will now show "N/A" for FLYBY and RANGE to indicate this
    - If dump1090 isn't found or we are currently under a watchdog timeout, TRACKING will show "N/A" as well
    - Additional minor display text formatting tweaks
    - Minor text output tweaks

v.2.10.0 - 2025-03-08
    - 10 releases for this version, wow
    - API results cache is now tied to FLYBY_STALENESS
        - If the same aircraft appears within the FLYBY_STALENESS time, it will reuse the same API result
    - Fix undiscovered bug regarding FLYBY_STALENESS since that feature was introduced (v.1.3.0): it didn't fully work (lmao)
        - Caused by subtracting the current time from the last seen time of the aircraft and comparing
          it to the FLYBY_STALENESS time: it always resulted in a negative number. This should've been the other way around. Oops.
    - Change some settings defaults:
        - Sunrise and sunset are now defaulted to true
        - Brightness is now set for ACTIVE_PLANE_BRIGHTNESS
        - Main brightness lowered to 75, secondary brightness lowered to 40
    - Updater script now checks if FlightGazer has been installed in the system
    - Reverted change from v.2.9.2: Initialization script will check RGBMatrixEmulator again
        - The bug for RGBMatrixEmulator has been fixed: (https://github.com/ty-porter/RGBMatrixEmulator/compare/v0.12.3...v0.12.4)

v.2.9.2 - 2025-03-07
    - Initialization script now skips checking RGBMatrixEmulator if it's already installed
        - This is a workaround for when we use the updater; RGBMatrixEmulator will not work until next reboot due to a bug

v.2.9.1 - 2025-03-05
    - Fix update script to handle when we change the color settings file in source (it breaks the display)
        - This bug was caused by how the updater migrates color config: it basically just copies the old one into the new one
        - If there is a reference to a new display element (see: last update), it won't exist after migration
        - The display renderer will crash because it cannot reference the color for the new display element
        - Now we just simply compare line lengths between old and new color config files and just alert the user that colors
          have been reverted to defaults when there is a mismatch
    - The feature creep will continue until morale improves: read CPU temp in Interactive mode
        - Stealing functionality from my other project, UNRAID Status Screen
        - This was mostly just for me
    - Initialization script touch ups

v.2.9.0 - 2025-03-04
    - NEW: a progress bar is now present on the aircraft display when there are two or more aircraft in the area
        - This serves as an indicator of when FlightGazer will switch to another aircraft or
          how long it will display information about the current aircraft
        - The progress bar is also a graphical representation of the algorithm readout added in v.1.5.2
        - This element can be enabled or disabled with a new setting: DISPLAY_SWITCH_PROGRESS_BAR
        - Like all other display elements, the color can be customized
    - Updated docstrings in config file to show the types and range of data that can be accepted
    - In Interactive mode, added notice when the display routine fails, either during setup or at runtime
        - The display thread now has exception handling (it actually never did before), so in the exceedingly rare
          case it breaks, it will restart up to 5 times, then stop displaying output

v.2.8.0 - 2025-03-02
    - NEW: Track a specific aircraft via its ICAO hex, aka FOLLOW_MODE
        - If a specific aircraft enters the reception area of your ADS-B receiver, this will allow FlightGazer to track it
        - This is analogous to tar1090's "Isolate" feature
        - When tracking a specific aircraft, it will enable Enhanced Readout mode for that specific aircraft,
          regardless of the global ENHANCED_READOUT setting
            - If the aircraft enters the set tracking area, it will switch to using the normal flight watching mode if that is available
            - If there are multiple aircraft in the area and FlightGazer switches to this specific aircraft that is outside of the
              tracking area, it will switch to Enhanced Readout
        - In Interactive Mode the specific aircraft to follow will be prefixed with a "-->"
        - On the aircraft display, the callsign is suffixed with a "*"
        - This feature is limited to only one (1) aircraft, and cannot track multiple
    - Modified the letter 'Q' in the 3x5.bdf font for better clarity in callsigns
    - Small code fixes

v.2.7.3 - 2025-02-28
    - Initialization script now has a live/demo mode where it will only setup the environment in /tmp
        - This also does not install the service in systemd
    - Updater script now checks if the service is installed before restarting FlightGazer

v.2.7.2 - 2025-02-27
    - Updater script checks if service is disabled and does not automatically restart the service
    - Initialization script accepts new flags: an install-only/check dependencies mode and enabling verbose mode
    
v.2.7.1 - 2025-02-26
    - Apply tweaks to both updater and uninstaller scripts that should make them more robust to changes in the future
    - Fix tmux checking in main python script

v.2.7.0 - 2025-02-26
    - NEW: Interactive mode now uses colors for better clarity
    - Speed readout moved 1 pixel to the right for better spacing
    - Limit Flyby, Tracking, and Range readout on display if the values exceed what can fit in their sections
        - These limits will almost always never be hit, but they're there now
    - Increased pause length when FlightGazer encounters a dump1090 timeout 
    - Main python script now detects if it's running inside tmux
    - Interactive mode now has a reminder in the footer on how to exit
    - Smoothed splash screen scroll

v.2.6.3 - 2025-02-24
    - Mitigate occurrence when duplicate entires for the same aircraft are present
        - This edge case has been present since v.0.1.0 but did not cause any issues
        - When an aircraft is using both ADS-B and UAT, ADS-B will prevail
        - FlightGazer will always pick the first entry of the same aircraft it encounters, even if another entry has better information
        - This does not affect No-Filter mode
    - Aircraft selection algorithm tweak: once all aircraft in the area are cycled through, pick an aircraft not the last selected one
    - Minor code fixes
    - More typo fixes (it appears I cannot English)

v.2.6.2 - 2025-02-21
    - Improved display module import handling and better logging messages

v.2.6.1 - 2025-02-20
    - Don't play splash screen when "no display" option passed to init script
    - Add banner to updater script
    - Typo fixes

v.2.6.0 - 2025-02-13
    - FIX: Edge case in aircraft selector routine that may have existed before v.1.0.0, causing it to fail to select an aircraft
        - Includes aircraft selector algorithm refactoring for better resillence
        - Also affected fetching and displaying API results as this relies on the aircraft selector to work
    - Minor text tweaks
    - Change more "plane" references to "aircraft" for further consistency
    - Refactored dump1090 and API processing slightly
    - For certain site environments, limit amount of specific logging messages to prevent spamming the log
    - Actually make the default config have FLYBY_STATS_ENABLED set to 'True' (it was not in v.2.5.0, oops)

v.2.5.0 - 2025-02-06
    - NEW: ENHANCED_READOUT_AS_FALLBACK setting
        - If the provided API key fails at startup or if the set API_LIMIT value is reached, switch to using ENHANCED_READOUT
    - NEW: Calculate aircraft elevation from horizon and slant range (aka line-of-sight distance)
        - Available only in Interactive mode
        - As of this update and to the scope of the author's research, no other ADS-B processor offers these calculations
        - NB: angle of elevation assumes the site elevation is 0 (the ground at the local horizon) and not the actual elevation of the site/antenna.
          For distances near the site, using this geometric datum has negligible effect on the accuracy of the calculation.
          At distances closer to the actual radio horizon (using the range outline provided by heywhatsthat), the accuracy
          can be off by a few degrees due to compounding factors such as actual elevation differences (terrain) and the fact that
          the Earth is not a perfect sphere
    - FLYBY_STATS_ENABLED is now defaulted to "True"
    - Changed readable references of "plane" or "planes" to "aircraft" and using the word "aircraft" in documentation henceforth
    - Minor tweaks to dump1090 processing
        - Use the best available altitude (geometric) if available instead of just barometric altitude
        - Take advantage of readsb features if present
    - Further aircraft selection algorithm tweaks
    - Various underlying code tweaks
    - Logging output tweaks

v.2.4.1 - 2025-02-01
    - HOTFIX: Adjusted systemd start timeout for initial setup after update
        - This would cause FlightGazer to never complete its setup and never start
    - Adjusted update script to restart FlightGazer in the background
        - Changed permissions to 644 from 777 as well

v.2.4.0 - 2025-02-01
    - Refactored systemd service and init script to handle system shutdowns more gracefully
        - Important: If you already have FlightGazer (v.1.5.0 - v.2.3.0) installed as a service, 
          you must remove the service file at /etc/systemd/system/flightgazer.service before updating
          to this release. Not doing so will cause the service to report a startup failure!
    - Tweaked plane selection algorithm for cases when a next plane was planned to be selected but
      the plane count changes, which would cause the current focus plane to stay selected longer
    - Filter out "TIS-B Other" type messages as these are usually ground implements rather than aircraft
    - Added verbose mode for main python script for better debugging/logging
        - Added additional stat readouts in console output
    - Changed receiver stats refresh frequency suited for monitoring readsb autogain
    - Removed unused code that was not in use

v.2.3.0 - 2025-01-24
    - NEW: Logging
        - Solves issue of not being able to read script output when started as a service
        - Provides method of getting log output for troubleshooting
        - Overhauled text output due to this addition (console printout of data is unaffected by this change)
    - NEW: Option to control airplane location staleness via new setting, LOCATION_TIMEOUT
        - dump1090's default is to remove planes from its tracking list after not receiving a location for more than 60 seconds
        - This is now a customizable metric that affects displayed total plane count to make it more "real-time"
    - Improved handling of situations when we cannot read dump1090 once FlightGazer is running (eg: internet failing, dump1090 service fails, etc.)
        - Console output will also show a stat only if this occurs while running
        - Additional logic rearrangement as part of this change

v.2.2.0 - 2025-01-23
    - NEW: Colors are no longer hard-coded and can be configured
        - Slight tweaks to blue color preset to improve legibility
        - Additional color presets
    - Updated updater script to migrate color configuration file

v.2.1.2 - 2025-01-22
    - NEW: Added API checking to check both API key validity and to get usage status
        - According to FlightAware, his incurs 0 charges against your API usage (current as of this update)
    - The war with settings validation continues (more fixes)
    - Small code fixes and tweaks
    - Text output tweaks

v.2.1.1 - 2025-01-21
    - Fix permissions of files to owner of FlightGazer install directory when running updater
    
v.2.1.0 - 2025-01-20
    - NEW: New logo
    - NEW: Splash screen (to show off the new logo)
        - Only works if using the init script
        - Now there's something to show when the init script needs to update the working environment
    - Overhauled method to blink callsign
        - The design is now much less janky and much more robust
    - Small tweaks to updater scripts

v.2.0.1 - 2025-01-19
    - HOTFIX: Fix main script not working (failed to start)
        - Caused by settings checker, ironically
    - HOTFIX: Fix updater script
        - Had wrong line endings
        - Also failed to copy over temporary directory
        - Change file ownership to nobody before copying over as we are running as root
        - Re-architected script to be 2 stage to avoid copying over itself

v.2.0.0 - 2025-01-18
    - BREAKING CHANGE: new settings file format
        - Change from using a Python file to YAML for ease of settings migration in the future
        - v.2.0 and newer will not be able to read v.1.x or older settings files
            - If upgrading from v.1.x to v.2 or newer, you must reconfigure your settings manually
                - This affects an estimated one person as of this Version (the author)
    - NEW: Brightness settings based on time of day
        - Switchover based on local sunrise/sunset or manual settings
    - NEW: Brightness setting for when there is an active plane on display
    - NEW: Optional sunrise/sunset times on clock display
        - Requires that location is set/available
    - NEW: Optional receiver stats on main clock display
        - Track receiver gain (if dump1090 autogain is enabled on the device)
        - Also display noise levels and percentage of loud signals
    - NEW: Updater script that will upgrade FlightGazer to the latest commit on GitHub
        - Migrates settings and stats as well
        - Forces the init script to check the FlightGazer virtual environment; startup will take slightly longer after an update
    - NEW: Flight name (callsign/registration) blinks a few times when entering active plane display or a switchover to another plane
        - Grabs attention better and provides clearer indicator of plane switchover
    - Massive code restructuring. Like, a lot of changes. Almost a complete rewrite. gg anyone else using this so far
        - Restructured config file for clarity
        - Numerous code cleanups
        - Refactoring to accommodate for all the added features and any future feature creep
        - Bolstered settings checking to increase resillency against misconfiguration (not unbreakable though)
    - In interactive mode, receiver stats are also shown
    - Updated init script
    - Modified 3x5.bdf font to support arrows and other useful drawing characters
    - Fixed minor bug with plane selection algorithm where it would not loop through planes once all planes have been shown (was present since v.1.4.0)
    - Handle cases when there is an empty callsign (this bug went unnoticed since inception)
    - Further improve display responsiveness
    - This update was originally slated to be v.1.6.0 but the changes snowballed enough to warrant a version bump (understandably)

v.1.5.2 - 2024-12-27
    - Additional text output tweaks for interactive mode
        - Version number now in header
        - When there are two or more planes shown, shows when the selector algorithm will choose another plane
    - Small refactoring

v.1.5.1 - 2024-12-17
    - Create RGBMatrixEmulator settings upon install to suppress harmless error output
        - Update uninstall script to remove RGBMatrixEmulator settings
    - The war on signal handling continues (attempt another fix)

v.1.5.0 - 2024-12-17
    - Depreciate using rc.local for startup, systemd service is now the only startup method
        - By default the script will now run in tmux
        - Improved compatibility when running as a systemd service
    - Even more improved signal handling for main python script
    - RGBMatrixEmulator is now installed by default and is the fallback unless No-Display mode is enabled
        - Restores same functionality found in v0.7.0 to v.0.9.0

v.1.4.2 - 2024-12-17
    - FIXED: HTTP 403 errors due to lack of user-agent in json file requests
    - Some text output tweaks

v.1.4.1 - 2024-12-17
    - init.sh: add ability to create a service via systemd if rc.local doesn't exist
        - Uninstall script updated to disable service as well if this method is used

v.1.4.0 - 2024-12-10
    - NEW: More screen functionality for non-API users via new mode, ENHANCED_READOUT
        - Latitude and longitude readout instead of origin and destination
        - RSSI instead of time
        - Ground track
        - Vertical speed
        - This is a toggleable option and overrides API access; even if a key is given, it will not fetch the API
    - Small plane readout layout tweaks due to above change
    - Minor plane selector algorithm tweak
    - Completely overhauled interactive display routine for more readable layout
    - More plane details in interactive readout to reflect new ENHANCED_READOUT mode
    - Improved screen data refresh responsiveness and switchover

v.1.3.0 - 2024-12-09
    - NEW: User selectable units
        - No longer hard-coded to aeronautical units
        - Added additional internal logic to handle different units
        - Adjusted docstrings
    - NEW: Backward compatibility with older settings files
    - Flyby counter is now more accurate
        - New option: flyby staleness, which determines if a flyby of the same plane can be considered as a flyby if it occurs after a set time

v.1.2.1 - 2024-11-26
    - Add another fallback for checking if another instance of FlightGazer is running, now internal to the python script
    - New process-related stats on console output

v.1.2.0 - 2024-11-25
    - New uninstall script
    - Initialization script now accepts optional arguments which trigger the same options in the python script
        - Can now run automatically inside tmux if present
    - Initialization script now checks if there is an already running instance of FlightGazer

v.1.1.1 - 2024-11-23
    - Create this changelog file
    - Small code refactoring
    - Small console output text changes and display value tweaks
    - Additional thread termination handling
    - Reload current running stats from stats file if it's the same date (useful for if we restart the script)
        - Write out stats upon exit so we don't lose data
    - Finally fix display driver thread not exiting when exit signals are sent (apparently was not fixed from v.0.9.0)

v.1.1.0 - 2024-11-15
    - Add new "No Filters" mode which outputs all detected planes from dump1090 regardless of set range
        - This mode disables API fetching and forces the display to only run as a clock
            - Since our range is no longer small, there is no point using the plane selector algorithm nor doing API fetches
        - This mode is perfect for ADS-B sites that don't receive a lot of traffic (think <200/day)
        - This mode has the same functionality as v.0.1.0
    - Add installation of tmux to the initialization script for convienence

v.1.0.2 - 2024-11-12
    - NEW: Added option to only display output to console (just like how pre-1.0.0 versions were when I was still debugging it)
    - Adjusted when we write to stats file during the day (23:59, before we do the stats reset at midnight, 00:00)
    - Handle case when we use the python script outside of the initialization script and don't pass any arguments

v.1.0.1 - 2024-11-11
    - FIXED: permissions issue of writing to stats file
        - This was caused by rgbmatrix dropping permissions after we initialized/checked we can write to the file
        - Only workaround for now is to keep rgbmatrix retaining root perms during runtime
        - Added logic to display initialization to check if we can drop permissions if we have a stats file/want to write to a stats file
    - Refactored exit text to eliminate reentrant errors
    - Added LED_PWM_BITS setting to adjust display output (default in rgbmatrix is 11, we default to 8 for balance of flicker reduction and color reproduction)

v.1.0.0 - 2024-11-10
    - MILESTONE: Core functionality fully realized 👍
    - Finally solve biggest hurdle of creating logic to match desired display output onto a physical RGB-Matrix display
    - Add argument parsing for python script for the initialization script
        - Initialization script will trigger different modes depending on if we are using an interactive terminal
        - Default mode is to run silently when we're started by a Raspberry pi's rc.local file
    - Retain RGBMatrixEmulator as a selectable option in case we don't have an actual RGB-Matrix display to output to
        - Add in additional logic for switchover capability

v.0.9.0 - 2024-11-09
    - Clock and plane display layouts finalized (thank you RGBMatrixEmulator)
    - Massive code rewrite: depreciated use of almost all code from 'its-a-plane' project
        - We only retain some framework modules; we no longer use separate "scenes"
        - Introduce new internal "display feeder" class for handling display output
    - Fix display driver thread causing it to run again once exit signal was called, requiring program to be exited twice or terminated forcefully
        - Restructured thread initialization timings due to above change to ensure all threads terminate when main thread is signalled to end

v.0.8.0 - 2024-11-08
    - Handle cases when we don't have required resources to drive an RGB-Matrix display
    - Continue work on how to actually produce output to a display (the clock works at least)
    - Repurpose initialization script from my other project "UNRAID Status Screen" for this setup
        - Writes to rc.local on a Raspberry Pi when run for the first time so that subsequent runs will start automatically at boot
    - Lower timeouts when we are probing possible dump1090 locations (used to be 5 seconds, now down to 0.5)

v.0.7.0 - 2024-11-05
    - Add RGBMatrixEmulator into code for display debugging and layout testing (much better than having to run this on real hardware, bless)
    - Move settings to an external file
    - Added brightness setting
    - Added smaller fonts and more colors
    - Refined plane selector algorithm based on real world testing
        - Additional algorithm info displayed in console output
    - Handle edge cases provided by API

v.0.6.0 - 2024-10-23
    - Determine how to utilize FlightAware API
    - Print API results to console
    - Add API call limiter
    - Reorganize directory layout for this project for future modules
    - Add caching structure for API results to minimize calls
    - Begin work on RGB-Matrix display routines by integrating code from 'its-a-plane' by Colin Waddell

v.0.5.0 - 2024-10-22
    - MILESTONE: Cool logo

v.0.4.0 - 2024-10-20
    - Implemented rudimentary selection algorithm for planes inside range
        - Console output also indicates how the algorithm is working
    - Finalize necessary information to pull from dump1090 json

v.0.3.0 - 2024-10-16
    - Figure out cross-thread communication with pydispatcher
    - Added airplane parser class to filter out stats based on desired range

v.0.2.0 - 2024-10-12
    - Add external modules to decode both registrations and country codes associated with ADS-B hex IDs
        - Translated from original javascript sources used in tar1090
        - Required as fallback since not all planes will have a callsign

v.0.1.0 - 2024-10-08
    - Figure out how to parse dump1090 json
    - Add routine to handle different dump1090 locations
    - Figure out how to combine dump978 output as well
    - Add in scheduler for periodic routines
    - Print to console routine

v.pre-alpha - 2024-09
    - what is ADS-B